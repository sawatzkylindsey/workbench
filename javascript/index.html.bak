<!DOCTYPE html>
<meta charset="utf-8">
<style>

.links line {
  stroke: #999;
  stroke-opacity: 0.6;
}

.nodes circle {
  stroke: #fff;
  stroke-width: 1.5px;
}

.labels {
  font-family: "Helvetica Neue", Arial, sans-serif;
  font-size: 14px;
}

</style>
<svg width="960" height="700"></svg>
<script src="https://d3js.org/d3.v4.min.js"></script>
<script>

var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");

var fo = svg.append("foreignObject")
    //.text("asdf")
    //.attr("type", "text")
    //.attr("placeholder", "adsf")
    /*.attr("x", 0)
    .attr("y", 0)
    .attr("width", 100)
    .attr("height", 150)*/
    .attr("transform", "translate(20, 20)");

var textbox = fo.append("xhtml:input")
    .attr("type", "text")
    .attr("id", "textbox");
    textbox
    .on("keydown", function () {
        if (d3.event.keyCode == 13) {
            selectTerm(textbox.property("value"));
            textbox.property("value", "");
        }
    });

var color = d3.scaleOrdinal(d3.schemeCategory20);

var simulation = d3.forceSimulation()
    .force("link", d3.forceLink()
        .id(function(d) { return d.id; }))
    .force("charge", d3.forceManyBody())
    .force("center", d3.forceCenter(width / 2, height / 2));

var graph_data;

d3.json("Astronomy.json", function(error, graph) {
  if (error) throw error;

  //var all_nodes = graph.nodes;
  //var center_node = {"id": "CENTER", "group": 2};
  //all_nodes.push(center_node);
  graph_data = graph;
  //var all_links = graph.links;

  //for(var x in graph.links) {
  //  all_links.push({"source": x["source"], "target": x["target"]});
  //}

  //for (var i = 0; i < graph_data.nodes.length; i++) {
    //console.log(all_nodes[i]);
    //all_links.push({"source": center_node, "target": all_nodes[i], "display": true});
  //}
  console.log(graph_data);

  var link = svg.append("g")
      .attr("class", "links")
    .selectAll("line")
    .data(graph_data.links)
    .enter()
    .append("line")
      //.attr("id", function(d) { return d["source"]id; })
      .attr("term-source", function(d) { return d.source; })
      .attr("term-target", function(d) { return d.target; })
      .attr("stroke-width", function(d) { return Math.sqrt(d.value); })
      .style("opacity", .05);

  /*var center_node = svg.select("g")
    .append("circle")
    .attr("r", 10)
    .attr("fill", function(d) { return color(1); });*/



  /*var center_link = svg.append("g")
    .attr("class", "links")
    .selectAll("bob_is_your_uncle")
    .data(center_links)
    .enter().append("line")
        .attr("stroke-width", function(d) { return 0.1; });*/

  var node = svg.append("g")
      .attr("class", "nodes")
    .selectAll("bob")
    .data(graph_data.nodes)
    .enter().append("circle")
      .attr("r", 5)
      .attr("fill", function(d) { return color(d.group); })
      .attr("term", function(d) { return d.id; })
      .style("opacity", .05)
      .on("click", unstick)
      .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));

            var labels = svg.selectAll(".labels")
                    .data(graph_data.nodes)
                    .enter()
                    .append("text")
                    .style("pointer-events", "none")
                    .attr("x", function(d) { return d.x; })
                    .attr("y", function(d) {return d.y;})
                    .attr("class", "labels")
                    .attr("stroke", "black")
                    .attr("term", function(d) { return d.id; })
                    .text(function (d) { return d.id; })
                    .style("opacity", .05);

  //node.append("text")
  //    .attr("x", function(d) { return d.x; })
  //    .attr("y", function(d) {return d.y;})
  //    .attr("class", "labels")
  //    //.attr("stroke", "black")
  //    .text(function(d) { return d.id; });
  //node.append("title")
  //    .text(function(d) { return d.id; });

  simulation
      .nodes(graph_data.nodes)
      .on("tick", ticked);

  simulation.force("link")
      .links(graph_data.links);

  function ticked() {
    link
        .attr("x1", function(d) { return xbounded(d.source); })
        .attr("y1", function(d) { return ybounded(d.source); })
        .attr("x2", function(d) { return xbounded(d.target); })
        .attr("y2", function(d) { return ybounded(d.target); });

    /*center_link
        .attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });*/

    node
        .attr("cx", function(d) { return xbounded(d);})//d.id == "CENTER" ? 500 : d.x; })
        .attr("cy", function(d) { return ybounded(d);});//d.id == "CENTER" ? 500 : d.y; });

    labels
        .attr("x", function(d) { return xbounded(d) + 4.5; })
        .attr("y", function(d) { return ybounded(d) + 4.5; })
  }
});

function xbounded(d) { return Math.max(Math.min(d.x, width - 50), 10); }
function ybounded(d) { return Math.max(Math.min(d.y, height - 10), 10); }

function dragstarted(d) {
  if (!d3.event.active) simulation.alphaTarget(0.3).restart();
  d.fx = d.x;
  d.fy = d.y;
}

function dragged(d) {
  d.fx = d3.event.x;
  d.fy = d3.event.y;
}

function dragended(d) {
  if (!d3.event.active) simulation.alphaTarget(0);
  //d.fx = null;
  //d.fy = null;
}

function unstick(d) {
  d.fx = null;
  d.fy = null;
}

function selectTerm(termname) {
    console.log(termname);
    var links = [];
    var neighbourhood = walk(termname, 2, links);
    console.log(neighbourhood);
    neighbourhood.forEach(function(t) {
        d3.selectAll("[term=" + t + "]")
            .style("opacity", 1);
    });
    neighbourhood.forEach(function(i) {
        neighbourhood.forEach(function(j) {
            d3.select("[term-source=" + i + "][term-target=" + j + "]")
                .style("opacity", 1);
            d3.select("[term-source=" + j + "][term-target=" + i + "]")
                .style("opacity", 1);
        });
    });
    links.forEach(function(l) {
    });
    //console.log(d3.select(".text text='" + "termname" + "'"));
    simulation.restart();
}

function walk(termname, depth) {
    var neighbours = new Set();
    neighbours.add(termname);

    if (depth > 0) {
        for (var i = 0; i < graph_data.links.length; i++) {
            var link = graph_data.links[i];
            console.log(link);

            if (link.source.id == termname) {
                neighbours.add(link.target.id);
            } else if (link.target.id == termname) {
                neighbours.add(link.source.id);
            }
        }
        var children = new Set();
        neighbours.forEach(function(i) {
            walk(i, depth - 1).forEach(function(c) {
                children.add(c);
            })
        });
        children.forEach(function(i) {
            neighbours.add(i);
        });
    }

    return neighbours;
}

</script>

